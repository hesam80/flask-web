.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "BUFFER" "" "April 2012" "" ""
.
.nf

Stability: 3 \- Stable
.
.fi
.
.P
Pure Javascript is Unicode friendly but not nice to binary data\. When dealing with TCP streams or the file system, it\'s necessary to handle octet streams\. Node has several strategies for manipulating, creating, and consuming octet streams\.
.
.P
Raw data is stored in instances of the \fBBuffer\fR class\. A \fBBuffer\fR is similar to an array of integers but corresponds to a raw memory allocation outside the V8 heap\. A \fBBuffer\fR cannot be resized\.
.
.P
The \fBBuffer\fR class is a global, making it very rare that one would need to ever \fBrequire(\'buffer\')\fR\.
.
.P
Converting between Buffers and JavaScript string objects requires an explicit encoding method\. Here are the different string encodings\.
.
.IP "\(bu" 4
\fB\'ascii\'\fR \- for 7 bit ASCII data only\. This encoding method is very fast, and will strip the high bit if set\. Note that this encoding converts a null character (\fB\'\e0\'\fR or \fB\'\eu0000\'\fR) into \fB0x20\fR (character code of a space)\. If you want to convert a null character into \fB0x00\fR, you should use \fB\'utf8\'\fR\.
.
.IP "\(bu" 4
\fB\'utf8\'\fR \- Multi byte encoded Unicode characters\. Many web pages and other document formats use UTF\-8\.
.
.IP "\(bu" 4
\fB\'ucs2\'\fR \- 2\-bytes, little endian encoded Unicode characters\. It can encode only BMP(Basic Multilingual Plane, U+0000 \- U+FFFF)\.
.
.IP "\(bu" 4
\fB\'base64\'\fR \- Base64 string encoding\.
.
.IP "\(bu" 4
\fB\'binary\'\fR \- A way of encoding raw binary data into strings by using only the first 8 bits of each character\. This encoding method is deprecated and should be avoided in favor of \fBBuffer\fR objects where possible\. This encoding will be removed in future versions of Node\.
.
.IP "\(bu" 4
\fB\'hex\'\fR \- Encode each byte as two hexidecimal characters\.
.
.IP "" 0
.
.SH "Class: Buffer"
The Buffer class is a global type for dealing with binary data directly\. It can be constructed in a variety of ways\.
.
.SS "new Buffer(size)"
.
.IP "\(bu" 4
\fBsize\fR Number
.
.IP "" 0
.
.P
Allocates a new buffer of \fBsize\fR octets\.
.
.SS "new Buffer(array)"
.
.IP "\(bu" 4
\fBarray\fR Array
.
.IP "" 0
.
.P
Allocates a new buffer using an \fBarray\fR of octets\.
.
.SS "new Buffer(str, [encoding])"
.
.IP "\(bu" 4
\fBstr\fR String \- string to encode\.
.
.IP "\(bu" 4
\fBencoding\fR String \- encoding to use, Optional\.
.
.IP "" 0
.
.P
Allocates a new buffer containing the given \fBstr\fR\. \fBencoding\fR defaults to \fB\'utf8\'\fR\.
.
.SS "buf\.write(string, [offset], [length], [encoding])"
.
.IP "\(bu" 4
\fBstring\fR String \- data to be written to buffer
.
.IP "\(bu" 4
\fBoffset\fR Number, Optional, Default: 0
.
.IP "\(bu" 4
\fBlength\fR Number, Optional
.
.IP "\(bu" 4
\fBencoding\fR String, Optional, Default: \'utf8\'
.
.IP "" 0
.
.P
Writes \fBstring\fR to the buffer at \fBoffset\fR using the given encoding\. \fBoffset\fR defaults to \fB0\fR, \fBencoding\fR defaults to \fB\'utf8\'\fR\. \fBlength\fR is the number of bytes to write\. Returns number of octets written\. If \fBbuffer\fR did not contain enough space to fit the entire string, it will write a partial amount of the string\. \fBlength\fR defaults to \fBbuffer\.length \- offset\fR\. The method will not write partial characters\.
.
.IP "" 4
.
.nf

buf = new Buffer(256);
len = buf\.write(\'\eu00bd + \eu00bc = \eu00be\', 0);
console\.log(len + " bytes: " + buf\.toString(\'utf8\', 0, len));
.
.fi
.
.IP "" 0
.
.P
The number of characters written (which may be different than the number of bytes written) is set in \fBBuffer\._charsWritten\fR and will be overwritten the next time \fBbuf\.write()\fR is called\.
.
.SS "buf\.toString([encoding], [start], [end])"
.
.IP "\(bu" 4
\fBencoding\fR String, Optional, Default: \'utf8\'
.
.IP "\(bu" 4
\fBstart\fR Number, Optional, Default: 0
.
.IP "\(bu" 4
\fBend\fR Number, Optional
.
.IP "" 0
.
.P
Decodes and returns a string from buffer data encoded with \fBencoding\fR (defaults to \fB\'utf8\'\fR) beginning at \fBstart\fR (defaults to \fB0\fR) and ending at \fBend\fR (defaults to \fBbuffer\.length\fR)\.
.
.P
See \fBbuffer\.write()\fR example, above\.
.
.SS "buf[index]"
\fI!\-\-type=property\-\-\fR \fI!\-\-name=[index]\-\-\fR
.
.P
Get and set the octet at \fBindex\fR\. The values refer to individual bytes, so the legal range is between \fB0x00\fR and \fB0xFF\fR hex or \fB0\fR and \fB255\fR\.
.
.P
Example: copy an ASCII string into a buffer, one byte at a time:
.
.IP "" 4
.
.nf

str = "node\.js";
buf = new Buffer(str\.length);

for (var i = 0; i < str\.length ; i++) {
  buf[i] = str\.charCodeAt(i);
}

console\.log(buf);

// node\.js
.
.fi
.
.IP "" 0
.
.SS "Class Method: Buffer\.isBuffer(obj)"
.
.IP "\(bu" 4
\fBobj\fR Object
.
.IP "\(bu" 4
Return: Boolean
.
.IP "" 0
.
.P
Tests if \fBobj\fR is a \fBBuffer\fR\.
.
.SS "Class Method: Buffer\.byteLength(string, [encoding])"
.
.IP "\(bu" 4
\fBstring\fR String
.
.IP "\(bu" 4
\fBencoding\fR String, Optional, Default: \'utf8\'
.
.IP "\(bu" 4
Return: Number
.
.IP "" 0
.
.P
Gives the actual byte length of a string\. \fBencoding\fR defaults to \fB\'utf8\'\fR\. This is not the same as \fBString\.prototype\.length\fR since that returns the number of \fIcharacters\fR in a string\.
.
.P
Example:
.
.IP "" 4
.
.nf

str = \'\eu00bd + \eu00bc = \eu00be\';

console\.log(str + ": " + str\.length + " characters, " +
  Buffer\.byteLength(str, \'utf8\') + " bytes");

// ½ + ¼ = ¾: 9 characters, 12 bytes
.
.fi
.
.IP "" 0
.
.SS "buf\.length"
.
.IP "\(bu" 4
Number
.
.IP "" 0
.
.P
The size of the buffer in bytes\. Note that this is not necessarily the size of the contents\. \fBlength\fR refers to the amount of memory allocated for the buffer object\. It does not change when the contents of the buffer are changed\.
.
.IP "" 4
.
.nf

buf = new Buffer(1234);

console\.log(buf\.length);
buf\.write("some string", "ascii", 0);
console\.log(buf\.length);

// 1234
// 1234
.
.fi
.
.IP "" 0
.
.SS "buf\.copy(targetBuffer, [targetStart], [sourceStart], [sourceEnd])"
.
.IP "\(bu" 4
\fBtargetBuffer\fR Buffer object \- Buffer to copy into
.
.IP "\(bu" 4
\fBtargetStart\fR Number, Optional, Default: 0
.
.IP "\(bu" 4
\fBsourceStart\fR Number, Optional, Default: 0
.
.IP "\(bu" 4
\fBsourceEnd\fR Number, Optional, Default: 0
.
.IP "" 0
.
.P
Does copy between buffers\. The source and target regions can be overlapped\. \fBtargetStart\fR and \fBsourceStart\fR default to \fB0\fR\. \fBsourceEnd\fR defaults to \fBbuffer\.length\fR\.
.
.P
Example: build two Buffers, then copy \fBbuf1\fR from byte 16 through byte 19 into \fBbuf2\fR, starting at the 8th byte in \fBbuf2\fR\.
.
.IP "" 4
.
.nf

buf1 = new Buffer(26);
buf2 = new Buffer(26);

for (var i = 0 ; i < 26 ; i++) {
  buf1[i] = i + 97; // 97 is ASCII a
  buf2[i] = 33; // ASCII !
}

buf1\.copy(buf2, 8, 16, 20);
console\.log(buf2\.toString(\'ascii\', 0, 25));

// !!!!!!!!qrst!!!!!!!!!!!!!
.
.fi
.
.IP "" 0
.
.SS "buf\.slice([start], [end])"
.
.IP "\(bu" 4
\fBstart\fR Number, Optional, Default: 0
.
.IP "\(bu" 4
\fBend\fR Number, Optional, Default: 0
.
.IP "" 0
.
.P
Returns a new buffer which references the same memory as the old, but offset and cropped by the \fBstart\fR (defaults to \fB0\fR) and \fBend\fR (defaults to \fBbuffer\.length\fR) indexes\.
.
.P
\fBModifying the new buffer slice will modify memory in the original buffer!\fR
.
.P
Example: build a Buffer with the ASCII alphabet, take a slice, then modify one byte from the original Buffer\.
.
.IP "" 4
.
.nf

var buf1 = new Buffer(26);

for (var i = 0 ; i < 26 ; i++) {
  buf1[i] = i + 97; // 97 is ASCII a
}

var buf2 = buf1\.slice(0, 3);
console\.log(buf2\.toString(\'ascii\', 0, buf2\.length));
buf1[0] = 33;
console\.log(buf2\.toString(\'ascii\', 0, buf2\.length));

// abc
// !bc
.
.fi
.
.IP "" 0
.
.SS "buf\.readUInt8(offset, [noAssert])"
.
.IP "\(bu" 4
\fBoffset\fR Number
.
.IP "\(bu" 4
\fBnoAssert\fR Boolean, Optional, Default: false
.
.IP "\(bu" 4
Return: Number
.
.IP "" 0
.
.P
Reads an unsigned 8 bit integer from the buffer at the specified offset\.
.
.P
Set \fBnoAssert\fR to true to skip validation of \fBoffset\fR\. This means that \fBoffset\fR may be beyond the end of the buffer\. Defaults to \fBfalse\fR\.
.
.P
Example:
.
.IP "" 4
.
.nf

var buf = new Buffer(4);

buf[0] = 0x3;
buf[1] = 0x4;
buf[2] = 0x23;
buf[3] = 0x42;

for (ii = 0; ii < buf\.length; ii++) {
  console\.log(buf\.readUInt8(ii));
}

// 0x3
// 0x4
// 0x23
// 0x42
.
.fi
.
.IP "" 0
.
.SS "buf\.readUInt16LE(offset, [noAssert])"
.
.SS "buf\.readUInt16BE(offset, [noAssert])"
.
.IP "\(bu" 4
\fBoffset\fR Number
.
.IP "\(bu" 4
\fBnoAssert\fR Boolean, Optional, Default: false
.
.IP "\(bu" 4
Return: Number
.
.IP "" 0
.
.P
Reads an unsigned 16 bit integer from the buffer at the specified offset with specified endian format\.
.
.P
Set \fBnoAssert\fR to true to skip validation of \fBoffset\fR\. This means that \fBoffset\fR may be beyond the end of the buffer\. Defaults to \fBfalse\fR\.
.
.P
Example:
.
.IP "" 4
.
.nf

var buf = new Buffer(4);

buf[0] = 0x3;
buf[1] = 0x4;
buf[2] = 0x23;
buf[3] = 0x42;

console\.log(buf\.readUInt16BE(0));
console\.log(buf\.readUInt16LE(0));
console\.log(buf\.readUInt16BE(1));
console\.log(buf\.readUInt16LE(1));
console\.log(buf\.readUInt16BE(2));
console\.log(buf\.readUInt16LE(2));

// 0x0304
// 0x0403
// 0x0423
// 0x2304
// 0x2342
// 0x4223
.
.fi
.
.IP "" 0
.
.SS "buf\.readUInt32LE(offset, [noAssert])"
.
.SS "buf\.readUInt32BE(offset, [noAssert])"
.
.IP "\(bu" 4
\fBoffset\fR Number
.
.IP "\(bu" 4
\fBnoAssert\fR Boolean, Optional, Default: false
.
.IP "\(bu" 4
Return: Number
.
.IP "" 0
.
.P
Reads an unsigned 32 bit integer from the buffer at the specified offset with specified endian format\.
.
.P
Set \fBnoAssert\fR to true to skip validation of \fBoffset\fR\. This means that \fBoffset\fR may be beyond the end of the buffer\. Defaults to \fBfalse\fR\.
.
.P
Example:
.
.IP "" 4
.
.nf

var buf = new Buffer(4);

buf[0] = 0x3;
buf[1] = 0x4;
buf[2] = 0x23;
buf[3] = 0x42;

console\.log(buf\.readUInt32BE(0));
console\.log(buf\.readUInt32LE(0));

// 0x03042342
// 0x42230403
.
.fi
.
.IP "" 0
.
.SS "buf\.readInt8(offset, [noAssert])"
.
.IP "\(bu" 4
\fBoffset\fR Number
.
.IP "\(bu" 4
\fBnoAssert\fR Boolean, Optional, Default: false
.
.IP "\(bu" 4
Return: Number
.
.IP "" 0
.
.P
Reads a signed 8 bit integer from the buffer at the specified offset\.
.
.P
Set \fBnoAssert\fR to true to skip validation of \fBoffset\fR\. This means that \fBoffset\fR may be beyond the end of the buffer\. Defaults to \fBfalse\fR\.
.
.P
Works as \fBbuffer\.readUInt8\fR, except buffer contents are treated as two\'s complement signed values\.
.
.SS "buf\.readInt16LE(offset, [noAssert])"
.
.SS "buf\.readInt16BE(offset, [noAssert])"
.
.IP "\(bu" 4
\fBoffset\fR Number
.
.IP "\(bu" 4
\fBnoAssert\fR Boolean, Optional, Default: false
.
.IP "\(bu" 4
Return: Number
.
.IP "" 0
.
.P
Reads a signed 16 bit integer from the buffer at the specified offset with specified endian format\.
.
.P
Set \fBnoAssert\fR to true to skip validation of \fBoffset\fR\. This means that \fBoffset\fR may be beyond the end of the buffer\. Defaults to \fBfalse\fR\.
.
.P
Works as \fBbuffer\.readUInt16*\fR, except buffer contents are treated as two\'s complement signed values\.
.
.SS "buf\.readInt32LE(offset, [noAssert])"
.
.SS "buf\.readInt32BE(offset, [noAssert])"
.
.IP "\(bu" 4
\fBoffset\fR Number
.
.IP "\(bu" 4
\fBnoAssert\fR Boolean, Optional, Default: false
.
.IP "\(bu" 4
Return: Number
.
.IP "" 0
.
.P
Reads a signed 32 bit integer from the buffer at the specified offset with specified endian format\.
.
.P
Set \fBnoAssert\fR to true to skip validation of \fBoffset\fR\. This means that \fBoffset\fR may be beyond the end of the buffer\. Defaults to \fBfalse\fR\.
.
.P
Works as \fBbuffer\.readUInt32*\fR, except buffer contents are treated as two\'s complement signed values\.
.
.SS "buf\.readFloatLE(offset, [noAssert])"
.
.SS "buf\.readFloatBE(offset, [noAssert])"
.
.IP "\(bu" 4
\fBoffset\fR Number
.
.IP "\(bu" 4
\fBnoAssert\fR Boolean, Optional, Default: false
.
.IP "\(bu" 4
Return: Number
.
.IP "" 0
.
.P
Reads a 32 bit float from the buffer at the specified offset with specified endian format\.
.
.P
Set \fBnoAssert\fR to true to skip validation of \fBoffset\fR\. This means that \fBoffset\fR may be beyond the end of the buffer\. Defaults to \fBfalse\fR\.
.
.P
Example:
.
.IP "" 4
.
.nf

var buf = new Buffer(4);

buf[0] = 0x00;
buf[1] = 0x00;
buf[2] = 0x80;
buf[3] = 0x3f;

console\.log(buf\.readFloatLE(0));

// 0x01
.
.fi
.
.IP "" 0
.
.SS "buf\.readDoubleLE(offset, [noAssert])"
.
.SS "buf\.readDoubleBE(offset, [noAssert])"
.
.IP "\(bu" 4
\fBoffset\fR Number
.
.IP "\(bu" 4
\fBnoAssert\fR Boolean, Optional, Default: false
.
.IP "\(bu" 4
Return: Number
.
.IP "" 0
.
.P
Reads a 64 bit double from the buffer at the specified offset with specified endian format\.
.
.P
Set \fBnoAssert\fR to true to skip validation of \fBoffset\fR\. This means that \fBoffset\fR may be beyond the end of the buffer\. Defaults to \fBfalse\fR\.
.
.P
Example:
.
.IP "" 4
.
.nf

var buf = new Buffer(8);

buf[0] = 0x55;
buf[1] = 0x55;
buf[2] = 0x55;
buf[3] = 0x55;
buf[4] = 0x55;
buf[5] = 0x55;
buf[6] = 0xd5;
buf[7] = 0x3f;

console\.log(buf\.readDoubleLE(0));

// 0\.3333333333333333
.
.fi
.
.IP "" 0
.
.SS "buf\.writeUInt8(value, offset, [noAssert])"
.
.IP "\(bu" 4
\fBvalue\fR Number
.
.IP "\(bu" 4
\fBoffset\fR Number
.
.IP "\(bu" 4
\fBnoAssert\fR Boolean, Optional, Default: false
.
.IP "" 0
.
.P
Writes \fBvalue\fR to the buffer at the specified offset\. Note, \fBvalue\fR must be a valid unsigned 8 bit integer\.
.
.P
Set \fBnoAssert\fR to true to skip validation of \fBvalue\fR and \fBoffset\fR\. This means that \fBvalue\fR may be too large for the specific function and \fBoffset\fR may be beyond the end of the buffer leading to the values being silently dropped\. This should not be used unless you are certain of correctness\. Defaults to \fBfalse\fR\.
.
.P
Example:
.
.IP "" 4
.
.nf

var buf = new Buffer(4);
buf\.writeUInt8(0x3, 0);
buf\.writeUInt8(0x4, 1);
buf\.writeUInt8(0x23, 2);
buf\.writeUInt8(0x42, 3);

console\.log(buf);

// <Buffer 03 04 23 42>
.
.fi
.
.IP "" 0
.
.SS "buf\.writeUInt16LE(value, offset, [noAssert])"
.
.SS "buf\.writeUInt16BE(value, offset, [noAssert])"
.
.IP "\(bu" 4
\fBvalue\fR Number
.
.IP "\(bu" 4
\fBoffset\fR Number
.
.IP "\(bu" 4
\fBnoAssert\fR Boolean, Optional, Default: false
.
.IP "" 0
.
.P
Writes \fBvalue\fR to the buffer at the specified offset with specified endian format\. Note, \fBvalue\fR must be a valid unsigned 16 bit integer\.
.
.P
Set \fBnoAssert\fR to true to skip validation of \fBvalue\fR and \fBoffset\fR\. This means that \fBvalue\fR may be too large for the specific function and \fBoffset\fR may be beyond the end of the buffer leading to the values being silently dropped\. This should not be used unless you are certain of correctness\. Defaults to \fBfalse\fR\.
.
.P
Example:
.
.IP "" 4
.
.nf

var buf = new Buffer(4);
buf\.writeUInt16BE(0xdead, 0);
buf\.writeUInt16BE(0xbeef, 2);

console\.log(buf);

buf\.writeUInt16LE(0xdead, 0);
buf\.writeUInt16LE(0xbeef, 2);

console\.log(buf);

// <Buffer de ad be ef>
// <Buffer ad de ef be>
.
.fi
.
.IP "" 0
.
.SS "buf\.writeUInt32LE(value, offset, [noAssert])"
.
.SS "buf\.writeUInt32BE(value, offset, [noAssert])"
.
.IP "\(bu" 4
\fBvalue\fR Number
.
.IP "\(bu" 4
\fBoffset\fR Number
.
.IP "\(bu" 4
\fBnoAssert\fR Boolean, Optional, Default: false
.
.IP "" 0
.
.P
Writes \fBvalue\fR to the buffer at the specified offset with specified endian format\. Note, \fBvalue\fR must be a valid unsigned 32 bit integer\.
.
.P
Set \fBnoAssert\fR to true to skip validation of \fBvalue\fR and \fBoffset\fR\. This means that \fBvalue\fR may be too large for the specific function and \fBoffset\fR may be beyond the end of the buffer leading to the values being silently dropped\. This should not be used unless you are certain of correctness\. Defaults to \fBfalse\fR\.
.
.P
Example:
.
.IP "" 4
.
.nf

var buf = new Buffer(4);
buf\.writeUInt32BE(0xfeedface, 0);

console\.log(buf);

buf\.writeUInt32LE(0xfeedface, 0);

console\.log(buf);

// <Buffer fe ed fa ce>
// <Buffer ce fa ed fe>
.
.fi
.
.IP "" 0
.
.SS "buf\.writeInt8(value, offset, [noAssert])"
.
.IP "\(bu" 4
\fBvalue\fR Number
.
.IP "\(bu" 4
\fBoffset\fR Number
.
.IP "\(bu" 4
\fBnoAssert\fR Boolean, Optional, Default: false
.
.IP "" 0
.
.P
Writes \fBvalue\fR to the buffer at the specified offset\. Note, \fBvalue\fR must be a valid signed 8 bit integer\.
.
.P
Set \fBnoAssert\fR to true to skip validation of \fBvalue\fR and \fBoffset\fR\. This means that \fBvalue\fR may be too large for the specific function and \fBoffset\fR may be beyond the end of the buffer leading to the values being silently dropped\. This should not be used unless you are certain of correctness\. Defaults to \fBfalse\fR\.
.
.P
Works as \fBbuffer\.writeUInt8\fR, except value is written out as a two\'s complement signed integer into \fBbuffer\fR\.
.
.SS "buf\.writeInt16LE(value, offset, [noAssert])"
.
.SS "buf\.writeInt16BE(value, offset, [noAssert])"
.
.IP "\(bu" 4
\fBvalue\fR Number
.
.IP "\(bu" 4
\fBoffset\fR Number
.
.IP "\(bu" 4
\fBnoAssert\fR Boolean, Optional, Default: false
.
.IP "" 0
.
.P
Writes \fBvalue\fR to the buffer at the specified offset with specified endian format\. Note, \fBvalue\fR must be a valid signed 16 bit integer\.
.
.P
Set \fBnoAssert\fR to true to skip validation of \fBvalue\fR and \fBoffset\fR\. This means that \fBvalue\fR may be too large for the specific function and \fBoffset\fR may be beyond the end of the buffer leading to the values being silently dropped\. This should not be used unless you are certain of correctness\. Defaults to \fBfalse\fR\.
.
.P
Works as \fBbuffer\.writeUInt16*\fR, except value is written out as a two\'s complement signed integer into \fBbuffer\fR\.
.
.SS "buf\.writeInt32LE(value, offset, [noAssert])"
.
.SS "buf\.writeInt32BE(value, offset, [noAssert])"
.
.IP "\(bu" 4
\fBvalue\fR Number
.
.IP "\(bu" 4
\fBoffset\fR Number
.
.IP "\(bu" 4
\fBnoAssert\fR Boolean, Optional, Default: false
.
.IP "" 0
.
.P
Writes \fBvalue\fR to the buffer at the specified offset with specified endian format\. Note, \fBvalue\fR must be a valid signed 32 bit integer\.
.
.P
Set \fBnoAssert\fR to true to skip validation of \fBvalue\fR and \fBoffset\fR\. This means that \fBvalue\fR may be too large for the specific function and \fBoffset\fR may be beyond the end of the buffer leading to the values being silently dropped\. This should not be used unless you are certain of correctness\. Defaults to \fBfalse\fR\.
.
.P
Works as \fBbuffer\.writeUInt32*\fR, except value is written out as a two\'s complement signed integer into \fBbuffer\fR\.
.
.SS "buf\.writeFloatLE(value, offset, [noAssert])"
.
.SS "buf\.writeFloatBE(value, offset, [noAssert])"
.
.IP "\(bu" 4
\fBvalue\fR Number
.
.IP "\(bu" 4
\fBoffset\fR Number
.
.IP "\(bu" 4
\fBnoAssert\fR Boolean, Optional, Default: false
.
.IP "" 0
.
.P
Writes \fBvalue\fR to the buffer at the specified offset with specified endian format\. Note, \fBvalue\fR must be a valid 32 bit float\.
.
.P
Set \fBnoAssert\fR to true to skip validation of \fBvalue\fR and \fBoffset\fR\. This means that \fBvalue\fR may be too large for the specific function and \fBoffset\fR may be beyond the end of the buffer leading to the values being silently dropped\. This should not be used unless you are certain of correctness\. Defaults to \fBfalse\fR\.
.
.P
Example:
.
.IP "" 4
.
.nf

var buf = new Buffer(4);
buf\.writeFloatBE(0xcafebabe, 0);

console\.log(buf);

buf\.writeFloatLE(0xcafebabe, 0);

console\.log(buf);

// <Buffer 4f 4a fe bb>
// <Buffer bb fe 4a 4f>
.
.fi
.
.IP "" 0
.
.SS "buf\.writeDoubleLE(value, offset, [noAssert])"
.
.SS "buf\.writeDoubleBE(value, offset, [noAssert])"
.
.IP "\(bu" 4
\fBvalue\fR Number
.
.IP "\(bu" 4
\fBoffset\fR Number
.
.IP "\(bu" 4
\fBnoAssert\fR Boolean, Optional, Default: false
.
.IP "" 0
.
.P
Writes \fBvalue\fR to the buffer at the specified offset with specified endian format\. Note, \fBvalue\fR must be a valid 64 bit double\.
.
.P
Set \fBnoAssert\fR to true to skip validation of \fBvalue\fR and \fBoffset\fR\. This means that \fBvalue\fR may be too large for the specific function and \fBoffset\fR may be beyond the end of the buffer leading to the values being silently dropped\. This should not be used unless you are certain of correctness\. Defaults to \fBfalse\fR\.
.
.P
Example:
.
.IP "" 4
.
.nf

var buf = new Buffer(8);
buf\.writeDoubleBE(0xdeadbeefcafebabe, 0);

console\.log(buf);

buf\.writeDoubleLE(0xdeadbeefcafebabe, 0);

console\.log(buf);

// <Buffer 43 eb d5 b7 dd f9 5f d7>
// <Buffer d7 5f f9 dd b7 d5 eb 43>
.
.fi
.
.IP "" 0
.
.SS "buf\.fill(value, [offset], [end])"
.
.IP "\(bu" 4
\fBvalue\fR
.
.IP "\(bu" 4
\fBoffset\fR Number, Optional
.
.IP "\(bu" 4
\fBend\fR Number, Optional
.
.IP "" 0
.
.P
Fills the buffer with the specified value\. If the \fBoffset\fR (defaults to \fB0\fR) and \fBend\fR (defaults to \fBbuffer\.length\fR) are not given it will fill the entire buffer\.
.
.IP "" 4
.
.nf

var b = new Buffer(50);
b\.fill("h");
.
.fi
.
.IP "" 0
.
.SH "buffer\.INSPECT_MAX_BYTES"
.
.IP "\(bu" 4
Number, Default: 50
.
.IP "" 0
.
.P
How many bytes will be returned when \fBbuffer\.inspect()\fR is called\. This can be overridden by user modules\.
.
.P
Note that this is a property on the buffer module returned by \fBrequire(\'buffer\')\fR, not on the Buffer global, or a buffer instance\.
.
.SH "Class: SlowBuffer"
This class is primarily for internal use\. JavaScript programs should use Buffer instead of using SlowBuffer\.
.
.P
In order to avoid the overhead of allocating many C++ Buffer objects for small blocks of memory in the lifetime of a server, Node allocates memory in 8Kb (8192 byte) chunks\. If a buffer is smaller than this size, then it will be backed by a parent SlowBuffer object\. If it is larger than this, then Node will allocate a SlowBuffer slab for it directly\.
