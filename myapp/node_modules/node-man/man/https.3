.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "HTTPS" "" "April 2012" "" ""
.
.nf

Stability: 3 \- Stable
.
.fi
.
.P
HTTPS is the HTTP protocol over TLS/SSL\. In Node this is implemented as a separate module\.
.
.SH "Class: https\.Server"
This class is a subclass of \fBtls\.Server\fR and emits events same as \fBhttp\.Server\fR\. See \fBhttp\.Server\fR for more information\.
.
.SH "https\.createServer(options, [requestListener])"
Returns a new HTTPS web server object\. The \fBoptions\fR is similar to \fBtls\.createServer()\fR\. The \fBrequestListener\fR is a function which is automatically added to the \fB\'request\'\fR event\.
.
.P
Example:
.
.IP "" 4
.
.nf

// curl \-k https://localhost:8000/
var https = require(\'https\');
var fs = require(\'fs\');

var options = {
  key: fs\.readFileSync(\'test/fixtures/keys/agent2\-key\.pem\'),
  cert: fs\.readFileSync(\'test/fixtures/keys/agent2\-cert\.pem\')
};

https\.createServer(options, function (req, res) {
  res\.writeHead(200);
  res\.end("hello world\en");
})\.listen(8000);
.
.fi
.
.IP "" 0
.
.SH "https\.request(options, callback)"
Makes a request to a secure web server\. All options from http\.request() \fIhttp\.html#http\.request\fR are valid\.
.
.P
Example:
.
.IP "" 4
.
.nf

var https = require(\'https\');

var options = {
  host: \'encrypted\.google\.com\',
  port: 443,
  path: \'/\',
  method: \'GET\'
};

var req = https\.request(options, function(res) {
  console\.log("statusCode: ", res\.statusCode);
  console\.log("headers: ", res\.headers);

  res\.on(\'data\', function(d) {
    process\.stdout\.write(d);
  });
});
req\.end();

req\.on(\'error\', function(e) {
  console\.error(e);
});
.
.fi
.
.IP "" 0
.
.P
The options argument has the following options
.
.IP "\(bu" 4
host: IP or domain of host to make request to\. Defaults to \fB\'localhost\'\fR\.
.
.IP "\(bu" 4
port: port of host to request to\. Defaults to 443\.
.
.IP "\(bu" 4
path: Path to request\. Default \fB\'/\'\fR\.
.
.IP "\(bu" 4
method: HTTP request method\. Default \fB\'GET\'\fR\.
.
.IP "\(bu" 4
\fBhost\fR: A domain name or IP address of the server to issue the request to\. Defaults to \fB\'localhost\'\fR\.
.
.IP "\(bu" 4
\fBhostname\fR: To support \fBurl\.parse()\fR \fBhostname\fR is preferred over \fBhost\fR
.
.IP "\(bu" 4
\fBport\fR: Port of remote server\. Defaults to 443\.
.
.IP "\(bu" 4
\fBmethod\fR: A string specifying the HTTP request method\. Defaults to \fB\'GET\'\fR\.
.
.IP "\(bu" 4
\fBpath\fR: Request path\. Defaults to \fB\'/\'\fR\. Should include query string if any\. E\.G\. \fB\'/index\.html?page=12\'\fR
.
.IP "\(bu" 4
\fBheaders\fR: An object containing request headers\.
.
.IP "\(bu" 4
\fBauth\fR: Basic authentication i\.e\. \fB\'user:password\'\fR to compute an Authorization header\.
.
.IP "\(bu" 4
\fBagent\fR: Controls \fIAgent\fR behavior\. When an Agent is used request will default to \fBConnection: keep\-alive\fR\. Possible values:
.
.IP "\(bu" 4
\fBundefined\fR (default): use \fIglobalAgent\fR for this host and port\.
.
.IP "\(bu" 4
\fBAgent\fR object: explicitly use the passed in \fBAgent\fR\.
.
.IP "\(bu" 4
\fBfalse\fR: opts out of connection pooling with an Agent, defaults request to \fBConnection: close\fR\.
.
.IP "" 0
.
.P
The following options from tls\.connect() \fItls\.html#tls\.connect\fR can also be specified\. However, a \fIglobalAgent\fR silently ignores these\.
.
.IP "\(bu" 4
\fBkey\fR: Private key to use for SSL\. Default \fBnull\fR\.
.
.IP "\(bu" 4
\fBpassphrase\fR: A string of passphrase for the private key\. Default \fBnull\fR\.
.
.IP "\(bu" 4
\fBcert\fR: Public x509 certificate to use\. Default \fBnull\fR\.
.
.IP "\(bu" 4
\fBca\fR: An authority certificate or array of authority certificates to check the remote host against\.
.
.IP "" 0
.
.P
In order to specify these options, use a custom \fBAgent\fR\.
.
.P
Example:
.
.IP "" 4
.
.nf

var options = {
  host: \'encrypted\.google\.com\',
  port: 443,
  path: \'/\',
  method: \'GET\',
  key: fs\.readFileSync(\'test/fixtures/keys/agent2\-key\.pem\'),
  cert: fs\.readFileSync(\'test/fixtures/keys/agent2\-cert\.pem\')
};
options\.agent = new https\.Agent(options);

var req = https\.request(options, function(res) {
  \.\.\.
}
.
.fi
.
.IP "" 0
.
.P
Or does not use an \fBAgent\fR\.
.
.P
Example:
.
.IP "" 4
.
.nf

var options = {
  host: \'encrypted\.google\.com\',
  port: 443,
  path: \'/\',
  method: \'GET\',
  key: fs\.readFileSync(\'test/fixtures/keys/agent2\-key\.pem\'),
  cert: fs\.readFileSync(\'test/fixtures/keys/agent2\-cert\.pem\'),
  agent: false
};

var req = https\.request(options, function(res) {
  \.\.\.
}
.
.fi
.
.IP "" 0
.
.SH "https\.get(options, callback)"
Like \fBhttp\.get()\fR but for HTTPS\.
.
.P
Example:
.
.IP "" 4
.
.nf

var https = require(\'https\');

https\.get({ host: \'encrypted\.google\.com\', path: \'/\' }, function(res) {
  console\.log("statusCode: ", res\.statusCode);
  console\.log("headers: ", res\.headers);

  res\.on(\'data\', function(d) {
    process\.stdout\.write(d);
  });

})\.on(\'error\', function(e) {
  console\.error(e);
});
.
.fi
.
.IP "" 0
.
.SH "Class: https\.Agent"
An Agent object for HTTPS similar to http\.Agent \fIhttp\.html#http\.Agent\fR\. See \fIhttps\.request()\fR for more information\.
.
.SH "https\.globalAgent"
Global instance of \fIhttps\.Agent\fR which is used as the default for all HTTPS client requests\.
