.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "CLUSTER" "" "April 2012" "" ""
.
.nf

Stability: 1 Experimental \- Drastic changes in future versions
.
.fi
.
.P
A single instance of Node runs in a single thread\. To take advantage of multi\-core systems the user will sometimes want to launch a cluster of Node processes to handle the load\.
.
.P
The cluster module allows you to easily create a network of processes that all share server ports\.
.
.IP "" 4
.
.nf

var cluster = require(\'cluster\');
var http = require(\'http\');
var numCPUs = require(\'os\')\.cpus()\.length;

if (cluster\.isMaster) {
  // Fork workers\.
  for (var i = 0; i < numCPUs; i++) {
    cluster\.fork();
  }

  cluster\.on(\'death\', function(worker) {
    console\.log(\'worker \' + worker\.pid + \' died\');
  });
} else {
  // Worker processes have a http server\.
  http\.Server(function(req, res) {
    res\.writeHead(200);
    res\.end("hello world\en");
  })\.listen(8000);
}
.
.fi
.
.IP "" 0
.
.P
Running node will now share port 8000 between the workers:
.
.IP "" 4
.
.nf

% node server\.js
Worker 2438 online
Worker 2437 online
.
.fi
.
.IP "" 0
.
.P
The difference between \fBcluster\.fork()\fR and \fBchild_process\.fork()\fR is simply that cluster allows TCP servers to be shared between workers\. \fBcluster\.fork\fR is implemented on top of \fBchild_process\.fork\fR\. The message passing API that is available with \fBchild_process\.fork\fR is available with \fBcluster\fR as well\. As an example, here is a cluster which keeps count of the number of requests in the master process via message passing:
.
.IP "" 4
.
.nf

var cluster = require(\'cluster\');
var http = require(\'http\');
var numReqs = 0;

if (cluster\.isMaster) {
  // Fork workers\.
  for (var i = 0; i < 2; i++) {
    var worker = cluster\.fork();

    worker\.on(\'message\', function(msg) {
      if (msg\.cmd && msg\.cmd == \'notifyRequest\') {
        numReqs++;
      }
    });
  }

  setInterval(function() {
    console\.log("numReqs =", numReqs);
  }, 1000);
} else {
  // Worker processes have a http server\.
  http\.Server(function(req, res) {
    res\.writeHead(200);
    res\.end("hello world\en");
    // Send message to master process
    process\.send({ cmd: \'notifyRequest\' });
  })\.listen(8000);
}
.
.fi
.
.IP "" 0
.
.SH "cluster\.fork()"
Spawn a new worker process\. This can only be called from the master process\.
.
.SH "cluster\.isMaster"
.
.SH "cluster\.isWorker"
Boolean flags to determine if the current process is a master or a worker process in a cluster\. A process \fBisMaster\fR if \fBprocess\.env\.NODE_WORKER_ID\fR is undefined\.
.
.SH "Event: \'death\'"
When any of the workers die the cluster module will emit the \'death\' event\. This can be used to restart the worker by calling \fBfork()\fR again\.
.
.IP "" 4
.
.nf

cluster\.on(\'death\', function(worker) {
  console\.log(\'worker \' + worker\.pid + \' died\. restart\.\.\.\');
  cluster\.fork();
});
.
.fi
.
.IP "" 0
.
.P
Different techniques can be used to restart the worker depending on the application\.
