.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "ASSERT" "" "April 2012" "" ""
.
.nf

Stability: 5 \- Locked
.
.fi
.
.P
This module is used for writing unit tests for your applications, you can access it with \fBrequire(\'assert\')\fR\.
.
.SH "assert\.fail(actual, expected, message, operator)"
Throws an exception that displays the values for \fBactual\fR and \fBexpected\fR separated by the provided operator\.
.
.SH "assert(value, message), assert\.ok(value, [message])"
Tests if value is a \fBtrue\fR value, it is equivalent to \fBassert\.equal(true, value, message);\fR
.
.SH "assert\.equal(actual, expected, [message])"
Tests shallow, coercive equality with the equal comparison operator ( \fB==\fR )\.
.
.SH "assert\.notEqual(actual, expected, [message])"
Tests shallow, coercive non\-equality with the not equal comparison operator ( \fB!=\fR )\.
.
.SH "assert\.deepEqual(actual, expected, [message])"
Tests for deep equality\.
.
.SH "assert\.notDeepEqual(actual, expected, [message])"
Tests for any deep inequality\.
.
.SH "assert\.strictEqual(actual, expected, [message])"
Tests strict equality, as determined by the strict equality operator ( \fB===\fR )
.
.SH "assert\.notStrictEqual(actual, expected, [message])"
Tests strict non\-equality, as determined by the strict not equal operator ( \fB!==\fR )
.
.SH "assert\.throws(block, [error], [message])"
Expects \fBblock\fR to throw an error\. \fBerror\fR can be constructor, regexp or validation function\.
.
.P
Validate instanceof using constructor:
.
.IP "" 4
.
.nf

assert\.throws(
  function() {
    throw new Error("Wrong value");
  },
  Error
);
.
.fi
.
.IP "" 0
.
.P
Validate error message using RegExp:
.
.IP "" 4
.
.nf

assert\.throws(
  function() {
    throw new Error("Wrong value");
  },
  /value/
);
.
.fi
.
.IP "" 0
.
.P
Custom error validation:
.
.IP "" 4
.
.nf

assert\.throws(
  function() {
    throw new Error("Wrong value");
  },
  function(err) {
    if ( (err instanceof Error) && /value/\.test(err) ) {
      return true;
    }
  },
  "unexpected error"
);
.
.fi
.
.IP "" 0
.
.SH "assert\.doesNotThrow(block, [error], [message])"
Expects \fBblock\fR not to throw an error, see assert\.throws for details\.
.
.SH "assert\.ifError(value)"
Tests if value is not a false value, throws if it is a true value\. Useful when testing the first argument, \fBerror\fR in callbacks\.
